
! Usage: 
! read_netcdf inputfile data_type varname dim1_name dim2_name ... 
! Three data_type: int, float, double 
! Max four dimensions 


  program read_netcdf 

  use netcdf

  implicit none
  include "netcdf.inc"

  character (len = 200) :: infile 
  character (len = 100) :: data_type, varname
  character (200) ::  dim_name(8) 
  integer :: start(8), count(8), dimid(8)  
!  integer, allocatable  :: idata1d(:), idata2d(:, :), idata3d(:, :, :), idata4d(:, :, :, :) 
!  real, allocatable  :: rdata1d(:), rdata2d(:, :), rdata3d(:, :, :), rdata4d(:, :, :, :) 
  real*8, allocatable  :: ddata1d(:), ddata2d(:, :), ddata3d(:, :, :), ddata4d(:, :, :, :) 

  integer :: ncid, varid, iargc, ndims, nargs, i, j, k, l, len 

  nargs = iargc() 
  if (nargs .gt. 7 ) then 
   write(*, *)"max dimension is 4! " 
   stop
  end if 

  ndims = nargs - 3 

  call getarg(1, infile) 
  call getarg(2, data_type) 
  call getarg(3, varname) 
  do i=1, ndims 
    call getarg(i+3, dim_name(i) ) 
  end do 
  
  call check( nf90_open(infile, NF90_NOWRITE, ncid) )

  ! get all the dimension sizes 
  start(:) = 1
  count(:) = 1
  len = 1 
  do i=1, ndims 
    call check( nf90_inq_dimid(ncid, trim(dim_name(i)), dimid(i) ) ) 
    call check( nf90_inquire_dimension(ncid, dimid(i), len=count( dimid(i) ) ) ) 
    write(*, *) trim(dim_name(i)), " dimid= ", dimid(i), "  dim size=", count(dimid(i)) 
    len = len * count(dimid(i)) 
  end do 

  call check( nf90_inq_varid(ncid, trim(varname), varid) )

! forget data type matching. Convert everything to double when reading whatever types
! see https://www.unidata.ucar.edu/software/netcdf/docs/netcdf/Type-Conversion.html#Type-Conversion
!  select case (trim(data_type)) 
!    case ('int') 
      select case (ndims) 
         case (1) 
           allocate(ddata1d(count(1)))  
           !call check( nf90_get_var(ncid, varid, idata1d, start=start(1), count=count(1) ) )
           call check( nf90_get_var(ncid, varid, ddata1d) )  
           open(10, file=trim(varname)//".1gd4r", form="unformatted", access="direct", recl=len)
             write(10, rec=1) real(ddata1d)
           close(10)
         case (2) 
           allocate(ddata2d(count(1), count(2)))  
           call check( nf90_get_var(ncid, varid, ddata2d) )  
           open(10, file=trim(varname)//".1gd4r", form="unformatted", access="direct", recl=len)
             write(10, rec=1) real(ddata2d)
           close(10)
         case (3) 
           allocate(ddata3d(count(1), count(2), count(3) ))  
           call check( nf90_get_var(ncid, varid, ddata3d) ) 
           open(10, file=trim(varname)//".1gd4r", form="unformatted", access="direct", recl=len)
             write(10, rec=1) real(ddata3d)
           close(10)
         case (4) 
           !allocate(ddata4d(count(1), count(2), count(3), count(4)))  
           allocate(ddata4d(len, 1, 1, 1))  
           call check( nf90_get_var(ncid, varid, ddata4d, start=start, count=count) ) 
           open(10, file=trim(varname)//".1gd4r", form="unformatted", access="direct", recl=len*4)
             write(10, rec=1) real(ddata4d)
           close(10)
      end select 

  ! other types to be implemented 
  !end select 

  ! Close the file, freeing all resources.
  call check( nf90_close(ncid) )


contains

  subroutine check(status)
    integer, intent ( in) :: status
    
    if(status /= nf90_noerr) then 
      print *, trim(nf90_strerror(status))
      stop "Stopped"
    end if
  end subroutine check  

end program read_netcdf 

